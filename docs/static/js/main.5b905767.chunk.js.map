{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","imgs/bg-img.jpg","App.style.ts","imgs/death-star.png","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","MEDIUM","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","src","footerImg","alt","href","title","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b905767.chunk.js","sourcesContent":["import {shuffleArray} from \"./utils\";\r\n\r\nexport type Question = {\r\n   \r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState= Question & {answers: string[]};\r\nexport enum Difficulty{\r\n    EASY = \"easy\",\r\n    MEDIUM=\"medium\",\r\n    HARD=\"hard\",\r\n}\r\n\r\nexport const fetchQuizQuestions = async (amount:number, difficulty:Difficulty)=> {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=10&difficulty=${difficulty}&type=multiple`;\r\n\r\n    const data = await (await fetch(endpoint)).json();\r\n\r\n    return data.results.map((question: Question)=>(\r\n        {\r\n...question,\r\nanswers: shuffleArray([\r\n    ...question.incorrect_answers, \r\n    question.correct_answer]),\r\n        }\r\n    ))\r\n};","export const shuffleArray = (array: any[])=>\r\n[...array].sort(()=>Math.random()-0.5);","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #f7e7bb;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n        : 'linear-gradient(90deg, #8e6e13, #8e6e13)'};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;","import React from \"react\";\r\nimport { AnswerObject } from \"../App\";\r\nimport { Wrapper, ButtonWrapper} from \"./QuestionCard.styles\"\r\n\r\ntype Props={\r\n    question: string;\r\n    answers:string[];\r\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject|undefined;\r\n    questionNumber: number;\r\n    totalQuestions: number;\r\n}\r\nconst QuestionCard:React.FC<Props> =({question, answers, callback, userAnswer,questionNumber,totalQuestions}) => \r\n(<Wrapper>\r\n    <p className=\"number\">\r\n        Question: {questionNumber} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{__html: question}}/>\r\n    <div>\r\n       {answers.map(answer => (\r\n         <ButtonWrapper\r\n         key ={answer}\r\n         correct={userAnswer?.correctAnswer === answer} \r\n         userClicked ={userAnswer?.answer === answer}> \r\n             <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n                 <span dangerouslySetInnerHTML={{__html: answer}}/>\r\n             </button>\r\n         </ButtonWrapper>\r\n\r\n       ))} \r\n    </div>\r\n</Wrapper>);\r\n\r\nexport default QuestionCard;\r\n","export default __webpack_public_path__ + \"static/media/bg-img.8cf62ff3.jpg\";","import styled, { createGlobalStyle} from \"styled-components\";\r\n\r\nimport BGImage from \"./imgs/bg-img.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n\r\nhtml {\r\n    height: 100%;\r\n}\r\n\r\nbody{\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content:center;\r\n}\r\n*{\r\n    box-sizing: border-box;\r\n    font-family:'Catamaran', sans-serif;\r\n}`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: black;\r\n    font-size: 2rem;\r\n    padding: 10px;\r\n    margin: 10px;\r\n    background-image: linear-gradient(180deg, #fff, #997b59);\r\n    border-radius: 80px\r\n\r\n  }\r\n  h1 {\r\n    text-transform: capitalize;\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #8e6e13);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 10px;\r\n    border-radius: 10px;\r\n  }\r\n  .start, .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc99);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 10px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n  .footer{\r\n    background-color: #cba13c;\r\n    color: black;\r\n    margin-top: 10px;\r\n    border-radius: 15px ;\r\n    padding: 5px;\r\n  }\r\n  a{\r\n    text-decoration: none;\r\n  }\r\n  .footer_img{\r\n    height: 25px;\r\n  }\r\n`;","export default __webpack_public_path__ + \"static/media/death-star.2a0da5dc.png\";","import React, { useState} from 'react';\nimport { fetchQuizQuestions } from './API';\nimport { QuestionState, Difficulty} from './API';\nimport QuestionCard from \"./components/QuestionCard\";\nimport { GlobalStyle, Wrapper } from './App.style';\nimport footerImg from \"./imgs/death-star.png\"\n\n\n export type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS= 10;\n\nconst App =() =>{\n\n  const [loading, setLoading] = useState(false);\n\n  const [questions, setQuestions]= useState<QuestionState[]>([]);\n\n  const [number, setNumber]= useState(0);\n\n  const [userAnswers, setUserAnswers]= useState<AnswerObject[]>([]);\n\n  const [score, setScore] = useState(0);\n\n  const [gameOver, setGameOver] = useState(true);\n\n      const startTrivia = async () =>{\n      setLoading(true);\n      setGameOver(false);\n      const newQuestions = await fetchQuizQuestions(\n        TOTAL_QUESTIONS,\n        Difficulty.MEDIUM\n      );\n      setQuestions(newQuestions);\n      setScore(0);\n      setUserAnswers([]);\n      setNumber(0);\n      setLoading(false);\n    }\n\n  const checkAnswer= (e: React.MouseEvent<HTMLButtonElement>) =>{\n    if (!gameOver){\n      const answer = e.currentTarget.value;\n\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore(prev => prev + 1);\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer, \n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () =>{\n    const nextQuestion = number +1;\n    if (nextQuestion === TOTAL_QUESTIONS){\n      setGameOver(true);\n    } else { \n      setNumber(nextQuestion)\n\n    }\n  }\n  return (\n    <>\n    <GlobalStyle/>\n    <Wrapper>\n    <h1>Book quiz</h1>\n    {gameOver || userAnswers.length === TOTAL_QUESTIONS ?(\n    <button className=\"start\" onClick={startTrivia}>\n      Start\n    </button>):null}\n    {!gameOver ? <p className=\"score\">Score:{score}</p> : null}\n    {loading && <p className=\"loading\">Loading questions...</p>}\n    {!loading && !gameOver && (\n      <QuestionCard \n      questionNumber={number + 1}\n      totalQuestions={TOTAL_QUESTIONS}\n      question={questions[number].question}\n      answers={questions[number].answers}\n      userAnswer={userAnswers ? userAnswers[number] : undefined }\n      callback={checkAnswer}\n      />\n       )}\n    {!gameOver && \n      !loading && \n      userAnswers.length === number +1 && \n      number !==TOTAL_QUESTIONS - 1 ? (\n      <button className=\"next\" onClick={nextQuestion}>\n      Next question\n      </button>):null}\n\n      <small className= \"footer\">\n        Made with \n        <img className=\"footer_img\" src={footerImg} alt =\"Icon of death star\"/> by &copy;ArantxaDR 2021\n      <div>Iconos diseñados por \n        <a href=\"https://www.flaticon.es/autores/nhor-phai\" title=\"Nhor Phai\">\n          Nhor Phai</a> \n          from \n          <a href=\"https://www.flaticon.es/\" title=\"Flaticon\">www.flaticon.es</a>\n          </div>\n          </small>\n      \n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}